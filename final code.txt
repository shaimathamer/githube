import time
import cv
import pandas as pd
import numpy as np

CITY_DATA = { 'chicago': 'chicago.csv',
              'new york city': 'new_york_city.csv',
              'washington': 'washington.csv' }

def get_filters(city, month, day):
    """
    Asks user to specify a city, month, and day to analyze.

    Returns:
        (str) city - name of the city to analyze
        (str) month - name of the month to filter by, or "all" to apply no month filter
        (str) day - name of the day of week to filter by, or "all" to apply no day filter
    """
    print('Hello! Let\'s explore some US bikeshare data!')
    # TO DO: get user input for city (chicago, new york city, washington). HINT: Use a while loop to handle invalid inputs
    while True:
        city = input("which city do you wnat to explore? chicago or new york city or washington").lower()
        if city in CITY_DATA:
            print("Here you are")
            break
        else:
            print("\n Sorry, your inter isn't in my list of cities, try one from the three above")

    # TO DO: get user input for month (all, january, february, ... , june)
    months = ["all", "january", "february", "march", "april", "may", "june"]
    while True:
        month = input("enter the month you want: ").lower()
        if month in months:
            print("Will done")
            break
        else:
            print("\n Sorry, you need to select month form january, february, march, april, may, june or all")

    # TO DO: get user input for day of week (all, monday, tuesday, ... sunday)
    days = ["all", "monday", "tuesday", "wednesday", "thursday", "friday", "saturday", "sunday"]
    while True:
        day = input("enter the day you want, all, monday, tuesday, wednesday, thursday, friday, saturday, sunday").loweer()
        if day in days:
            print("I got it")
            break
        else:
            print("\n Sorry, you need to select day form above")

    print('-'*40)
    return city, month, day


def load_data(city, month, day):
    """
    Loads data for the specified city and filters by month and day if applicable.

    Args:
        (str) city - name of the city to analyze
        (str) month - name of the month to filter by, or "all" to apply no month filter
        (str) day - name of the day of week to filter by, or "all" to apply no day filter
    Returns:
        df - Pandas DataFrame containing city data filtered by month and day
    """
#loading the data files into data frame
    df = pd.read_csv(city_data["chicago"])
    df = pd.read_csv(city_data["new york city"])
    df = pd.read_csv(city_data["washington"])

    return df

# convert the Start Time column to datetime
    df['Start Time'] = pd.to_datetime(df['Start Time'])

# extract hour from the Start Time column to create an hour column
    df['hour'] = df['Start Time'].dt.hour

# extract month and day of week from Start Time to create new columns
    df['month'] = df['Start Time'].dt.month
    df['day_of_week'] = df['Start Time'].dt.weekday_name

# filter by month if applicable
    if month != 'all':
        # use the index of the months list to get the corresponding int
        months = ['january', 'february', 'march', 'april', 'may', 'june']
        month = months.index(month) + 1

        # filter by month to create the new dataframe
        df = df[df['month'] == month]

    # filter by day of week if applicable
   if day != 'all':
        # filter by day of week to create the new dataframe
        df = df[df['day_of_week'] == day.title()]
        return df

def time_stats(df):
    """Displays statistics on the most frequent times of travel."""

    print('\nCalculating The Most Frequent Times of Travel...\n')
    start_time = time.time()

    # TO DO: display the most common month
    comm_m = df["month"].mode()[0]
    print("most common month is ", comm_m)


    # TO DO: display the most common day of week
    comm_d = df["days"].mode()[0]
    print("most common day is ", comm_d)

    # TO DO: display the most common start hour
    comm_h = df["start time"].mode()[0]
    print("most common hour is ", comm_h)

    #time of execute system
    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)


def station_stats(df):
    """Displays statistics on the most popular stations and trip."""
    
    print('\nCalculating The Most Popular Stations and Trip...\n')
    start_time = time.time()

    # TO DO: display most commonly used start station
    comm_ssta = df["start station"].mode()[0]
    print("most common start station is ", comm_ssta)

    # TO DO: display most commonly used end station
    comm_esta = df["end station"].mode()[0]
    print("most common end station is ", comm_esta)

    # TO DO: display most frequent combination of start station and end station trip
    freq_ses = df["start station & end station"].mode()[0]
    print("most frequent combination of start station & end station is ", freq_ses)

    #time of execute system
    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)


def trip_duration_stats(df):
    """Displays statistics on the total and average trip duration."""

    print('\nCalculating Trip Duration...\n')
    start_time = time.time()

    # TO DO: display total travel time
    total_travel_time = df["Trip Duration"].sum()
    print("Total Travel Time is ",total_travel_time)

    # TO DO: display mean travel time
    mean_travel_time = df["Trip Duration"].mean()
    print("Mean Travel Time is ",mean_travel_time)

    #time of execute system
    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)


def user_stats(df):
    """Displays statistics on bikeshare users."""

    print('\nCalculating User Stats...\n')
    start_time = time.time()

    # TO DO: Display counts of user types
    type_user_count = df["User Type"].value_counts()
    print("User Types are ", type_user_count)

    # TO DO: Display counts of gender
    
    if city == ("chicago" or "new york"):
        gen_user_count = df["Gender"].value_counts()
        print("User Gender are ", gen_user_count)

    # TO DO: Display earliest, most recent, and most common year of birth
    if "Birth Year" in df.columns:
        earliest_y = df['Birth Year'].min()
        print("earliest year of birth is", earliest_y)
        most_rec = df['Birth Year'].max()
        print("most recent year of birth is", most_rec)
        most_comm = df['Birth Year'].mode()
        print("most commen year of birth is", most_comm)
        
    #time of execute system
    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)


def main():
    while True:
        city, month, day = get_filters()
        df = load_data(city, month, day)

        time_stats(df)
        station_stats(df)
        trip_duration_stats(df)
        user_stats(df)

        restart = input('\nWould you like to restart? Enter yes or no.\n')
        if restart.lower() != 'yes':
            break


if __name__ == "__main__":
	main()
